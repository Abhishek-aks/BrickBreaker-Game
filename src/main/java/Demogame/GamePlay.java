/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Demogame;

import javax.swing.JPanel;
import javax.swing.Timer;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Font;
// for action operation
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
// for reception of an operation
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author everg
 */

// interfaces with eventlistener(KeyListener) & ActionListener (thus abstract Method called)
public class GamePlay extends JPanel implements KeyListener , ActionListener {  
    // For the movement of the ledger(Paddel) with left and right Key thus need eventListener(Keylistener)& ActionListener
    private boolean play = false;   //  click to start play
    private int score = 0;          //  for scoring count
    private int totalbricks = 30;   //  count of bricks in the game(21)
    private Timer Timer;            //  time limit to play game (all 21 brick get destroyed within time limit to win the game)
    private int delay = 8;          //  time between the new game s tarts
    private int playerX = 310;      //  
    private int ballposX = 120;     //  ball position
    private int ballposY = 350;     //  ball position
    private int ballXdir = 2;      //  movement of ball in x -direction( for 0 up and down)
    private int ballYdir = -2;      //  movement of ball in y -direction
    private MapGenerator map;       //  

    public GamePlay() {                     //  Constructor called
       
        addKeyListener(this);            // calling listener
        setFocusable(true );
        setFocusTraversalKeysEnabled(false);
        Timer = new Timer(delay, this);
        Timer.start();
        // listener is set on Timer 
        
         map = new MapGenerator(4, 9);       //  map class generate the brick
    }
    
    @Override
     public void paint(Graphics g) {    //  for visibility so import awt.Grapgics
    	 //black canvas - a screen plateform over which the brickbreak games function
        g.setColor(Color.black);
        g.fillRect(2, 2, 696, 596);

        map.draw((Graphics2D) g);

        //borders
        g.setColor(Color.yellow);
        g.fillRect(0, 0, 5, 596);
        g.fillRect(0, 0, 696, 5);
        g.fillRect(695, 0, 5, 596);
        
        //Message that need to be displayed
        g.setColor(Color.white);                                    //  message colour
        g.setFont(new Font("serif", Font.BOLD, 25));   //  message font
        g.drawString("" + score, 590, 30);     //   score textline is at sepecified position     

           //Ledger(Paddle) - is rectangle bar from which ball bounce back.
        g.setColor(Color.GREEN);
        g.fillRect(playerX, 545, 125, 15);
        g.fillOval(playerX+((125)/2), 560, 15, 10);

        //ball     & by now only bricks left to design
        g.setColor(Color.BLUE);
        g.fillOval(ballposX, ballposY, 15, 15);

// Ball getting out of bounce
// i.e., game over by the ball doesnt bounce
        if (ballposY > 570) {   //max bound is 570 -yaxis and on x-axis ball keep bouncing 
            play = false;
            ballXdir = 0;
            ballYdir = 0;
            g.setColor(Color.red);
            g.setFont(new Font("serif", Font.BOLD, 30));
            g.drawString("    Game Over Score: " + score, 190, 300);

            g.setFont(new Font("serif", Font.BOLD, 30));
            g.drawString("   Press Enter to Restart", 190, 340);
        }
// if won the Game, it will state from begining but ball reset to its start Position
        if(totalbricks == 0){
            play = false;
            ballYdir = -2;  
            ballXdir = -1;
            g.setColor(Color.red);
            g.setFont(new Font("serif",Font.BOLD,30));
            g.drawString("    Game Over: "+score,190,300);

            g.setFont(new Font("serif", Font.BOLD, 30));
            g.drawString("   Press Enter to Restart", 190, 340);

        }
        g.dispose();
    }

// ABstract Method gets accessed via GamePlay class.
// 2type of Events will happen and once Imported 4 function automatically generated/initiated
// 1.keylistener - KeyTyped,KeyReleased,KeyPressed & 2.ActiveListener - Actionperformed
    @Override //autogenerated Method on import of (Actionlistener)
    public void actionPerformed(ActionEvent e) {
        Timer.start();  // game timing started.

        if (play) { // if play start then ball move
            if (new Rectangle(ballposX, ballposY, 20, 20).intersects(new Rectangle(playerX, 550, 100, 8))) {
                ballYdir = -ballYdir;
            }

        A:      // brick  boundary restriction and paddle condition
        for (int i = 0; i < map.map.length; i++) {
            for (int j = 0; j < map.map[0].length; j++) {
                if (map.map[i][j] > 0) {
                   int brickX = j*map.bricksWidth + 80;
                   int brickY = i*map.bricksHeight + 50;
                   int bricksWidth = map.bricksWidth;
                   int bricksHeight = map.bricksHeight;

                   Rectangle rect = new Rectangle(brickX, brickY, bricksWidth, bricksHeight);
                   Rectangle ballrect = new Rectangle(ballposX, ballposY, 15, 15 );
                   Rectangle brickrect = rect;

                   if (ballrect.intersects(brickrect)) {
                        map.setBricksValue(0, i, j);
                        totalbricks--;
                        score += 5;
                        if (ballposX + 19 <= brickrect.x || ballposX + 1 >= brickrect.x + bricksWidth) {
                            ballXdir = -ballXdir;
                        } else {
                            ballYdir = -ballYdir;
                        }
                    break A;
                    }
                }
            }
        }

// Movement of Ball 
            ballposX += ballXdir;
            ballposY += ballYdir;
            
// condition for the ball movement or Padel mountation
            if (ballposX < 5) {         // left boundary restriction
                ballXdir = -ballXdir;
            }
            if (ballposY < 5) {         // top boundary restriction
                ballYdir = -ballYdir;
            }
            if (ballposX > 678) {       // right boundary restriction
                ballXdir = -ballXdir;
            }
        }
        repaint();
    }

    @Override //autogenerated Method on import of (keylistener)
    public void keyTyped(KeyEvent e) {
//autogenerated Method on import of (keylistener)
       }
     @Override //autogenerated Method on import of (keylistener)
    public void keyReleased(KeyEvent e) {
//autogenerated Method on import of (keylistener)
    }

    @Override //autogenerated Method on import of (keylistener)
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) { //VK is virtualKeyboard
            if (playerX >= 570 ) { // boundary condition so that paddle sudn't go out of frame
                playerX = 570;  // 700-125-5 = 570
            } else {
                moveRight();
            }
        }
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            if (playerX < 10) { // boundary  condition so that paddle sudn't go out of frame
                playerX = 10;
            } else {
                moveLeft();
            }
        }

        if (e.getKeyCode() == KeyEvent.VK_ENTER) { 
            if (!play) {
                ballposX = 120;
                ballposY = 350;
                ballXdir = -1;
                ballYdir = -2;
                score = 0;
                playerX = 310;
                totalbricks = 21;
                map = new MapGenerator(3, 7);

                repaint();
            }
        }
        }

        public void moveRight ()    // action defined to be called by Keypressed
        {
            play = true;    // if the right button pressed then move the ball
            playerX += 20; // player position plus by 20 to shift the Paddle Right
        }
        public void moveLeft ()
        {
            play = true;    // if the left button pressed then move the ball
            playerX -= 20; // player position minus by 20 to move the Paddle Left
        } 
}
